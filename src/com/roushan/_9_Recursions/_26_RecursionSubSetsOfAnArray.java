package com.roushan._9_Recursions;

import java.util.ArrayList;
import java.util.List;

public class _26_RecursionSubSetsOfAnArray {
    public static void main(String[] args) {
        int[] arr = {8, 2, 4};
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> subset = new ArrayList<>();

        createSubset(arr, 0, res, subset);
        System.out.println(res);
    }

    private static void createSubset(int[] nums, int index, List<List<Integer>> res, List<Integer> subset) {
        if (index == nums.length) {
            // Add the current subset to the result list
            res.add(new ArrayList<>(subset));
            return;
        }

        // Include the element at the current index
        subset.add(nums[index]);
        createSubset(nums, index + 1, res, subset);

        // Backtrack by removing the last added element
        subset.removeLast();
        // Exclude the element at the current index and move to the next element
        createSubset(nums, index + 1, res, subset);

        // Backtracking is used here to include the element and then exclude it in subsequent recursive calls
        // This ensures all possible subsets are generated by exploring both inclusion and exclusion of each element
    }
}
